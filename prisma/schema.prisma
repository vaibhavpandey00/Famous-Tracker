generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Session {
  session_id    String    @id @default(auto()) @map("_id") @db.ObjectId
  id            String    @unique
  shop          String    @unique
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        String?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

// Enums ensure data consistency for categories and subcategories.
enum Category {
  ATHLETE
  INFLUENCER
  MUSICIAN
  ACTOR
  ENTREPRENEUR
}

enum Subcategory {
  // Athlete Subcategories
  NFL
  NBA
  WNBA
  MLB
  MLS
  PREMIER_LEAGUE
  NHL
  PGA_TOUR
  FORMULA_1
  // Influencer Subcategories
  TWITTER
  X
  FACEBOOK
  INSTAGRAM
  YOUTUBE
  TIKTOK
  TWITCH
}

// Composite Type for grouping location fields.
type Location {
  city    String?
  state   String?
  country String
}

// Composite Type for a flexible list of social media profiles.
type Social {
  platform String
  link     String
}

model GlobalCelebrity {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  fullName       String
  normalizedName String

  categories    Category[]
  subcategories Subcategory[]

  socials Social[]

  location Location?

  // Athlete-specific fields remain optional.
  league   String?
  team     String?
  position String?

  // Two fields for follower counts: one for calculation, one for display.
  maxFollowerCount   BigInt?
  maxFollowerDisplay String?

  notableAchievements String[]
  notes               String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Indexes for Performance ---
  // Index for the new normalized name, critical for your search logic.
  @@index([normalizedName])
  // Index for searching by full name as a fallback.
  @@index([fullName])
  // Index to speed up filtering by categories.
  @@index([categories])
}

model MatchedCelebrity {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  // Customer Details
  customerName       String
  orderId            String
  products           String[]
  orderValue         Float
  // Customer matching celebrity detials
  matchedCelebName   String
  matchScore         Float?
  celebCategories    String[]
  socials            Social[]
  maxFollowerDisplay String?
  createdAt          DateTime @default(now())

  // Relation to the Shops model
  shopId String @db.ObjectId
  shop   Shops  @relation(fields: [shopId], references: [id])

  @@index([shopId, createdAt])
}

model Shops {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  shopId             String             @unique
  shopName           String?            @unique
  subscriptionStatus HasActiveSubs
  name               String?
  email              String?            @unique
  emailAlerts        Boolean            @default(false)
  slackAlerts        Boolean            @default(false)
  webhookAlerts      Boolean            @default(true)
  inAppAlerts        Boolean            @default(false)
  termsAccepted      Boolean?           @default(false)
  matches            MatchedCelebrity[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

type HasActiveSubs {
  active Boolean @default(false)
  subId  String?
}
